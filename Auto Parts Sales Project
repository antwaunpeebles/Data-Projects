Objective: 
This project aims to build a data-driven SQL-based system that helps wholesale 
distributors of auto parts track inventory movements, monitor sales performance, 
and optimize warehouse logistics using historical sales data. The system enables 
stakeholders to extract meaningful insights about product demand, warehouse performance, 
and sales trends over time. The data was from the Auto Parts Sales Dataset from Kaggle.

Database Name: 
auto_parts_sales_db

1. Seperate by three categories 

--Table: products
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    part_name VARCHAR(100),
    part_category VARCHAR(50)
);

-- Table: warehouses
CREATE TABLE warehouses (
    warehouse_id INT PRIMARY KEY,
    warehouse_location VARCHAR(100)
);

-- Table: sales
CREATE TABLE sales (
    sale_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id),
    warehouse_id INT REFERENCES warehouses(warehouse_id),
    sales_date DATE,
    units_sold INT,
    revenue DECIMAL(10, 2)
);

2. Sample Queries

A. Total Monthly Revenue by Warehouse
SELECT 
    w.warehouse_location,
    DATE_TRUNC('month', s.sales_date) AS month,
    SUM(s.revenue) AS total_monthly_revenue
FROM 
    sales s
JOIN 
    warehouses w ON s.warehouse_id = w.warehouse_id
GROUP BY 
    w.warehouse_location, DATE_TRUNC('month', s.sales_date)
ORDER BY 
    w.warehouse_location, month;

B. Top-Selling Car Parts Across All Locations
SELECT 
    p.part_name,
    SUM(s.units_sold) AS total_units_sold
FROM 
    sales s
JOIN 
    products p ON s.product_id = p.product_id
GROUP BY 
    p.part_name
ORDER BY 
    total_units_sold DESC
LIMIT 10;

C. Sales Variation by Part Category and Warehouse
SELECT 
    p.part_category,
    w.warehouse_location,
    SUM(s.revenue) AS category_revenue
FROM 
    sales s
JOIN 
    products p ON s.product_id = p.product_id
JOIN 
    warehouses w ON s.warehouse_id = w.warehouse_id
GROUP BY 
    p.part_category, w.warehouse_location
ORDER BY 
    p.part_category, category_revenue DESC;

D. Top 5 Products by Revenue Over the Past Year
SELECT 
    p.part_name,
    SUM(s.revenue) AS total_revenue
FROM 
    sales s
JOIN 
    products p ON s.product_id = p.product_id
WHERE 
    s.sales_date >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY 
    p.part_name
ORDER BY 
    total_revenue DESC
LIMIT 5;

E. Net Revenue Trends and Warehouse Performance
-- Monthly Revenue Trend
SELECT 
    DATE_TRUNC('month', s.sales_date) AS month,
    SUM(s.revenue) AS net_revenue
FROM 
    sales s
GROUP BY 
    month
ORDER BY 
    month;

-- Performance by Warehouse
SELECT 
    w.warehouse_location,
    SUM(s.revenue) AS total_revenue
FROM 
    sales s
JOIN 
    warehouses w ON s.warehouse_id = w.warehouse_id
GROUP BY 
    w.warehouse_location
ORDER BY 
    total_revenue DESC;

Extensions: 
Create dashboards using Tableau or Power BI

Use Python to automate data generation or reporting

Extend schema to include suppliers, inventory levels, or delivery times
