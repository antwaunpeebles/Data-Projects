Company-Budget-Tracker:

Creating a company budget tracker in Python is a great project that involves tracking expenses, income, and budget allocations. 
The goal is to allow the user to input data, perform necessary calculations, and then output the results into an Excel spreadsheet for further use.
We'll use Pandas for data management and OpenPyXL or XlsxWriter for writing the data to an Excel file.
Steps for the Budget Tracker:
1.	Define Categories: The budget will be divided into categories (e.g., Income, Expenses, and Allocations).
2.	Input Budget Data: We'll create input functions for adding budget data.
3.	Calculate Totals: Calculate the total income, total expenses, and remaining budget.
4.	Save to Excel: Output the budget data into an Excel file.
We'll start by simulating data entry and calculation using Python and then save everything to an Excel file.


import pandas as pd

# Step 1: Create a class for the budget tracker
class BudgetTracker:
    def __init__(self):
        # Initialize empty DataFrame for categories
        self.income_data = pd.DataFrame(columns=['Source', 'Amount'])
        self.expenses_data = pd.DataFrame(columns=['Category', 'Amount'])
        self.budget_data = pd.DataFrame(columns=['Category', 'Allocated Amount'])

    # Step 2: Add income entry
    def add_income(self, source, amount):
        self.income_data = self.income_data.append({'Source': source, 'Amount': amount}, ignore_index=True)

    # Step 3: Add expense entry
    def add_expense(self, category, amount):
        self.expenses_data = self.expenses_data.append({'Category': category, 'Amount': amount}, ignore_index=True)

    # Step 4: Add budget allocation
    def allocate_budget(self, category, amount):
        self.budget_data = self.budget_data.append({'Category': category, 'Allocated Amount': amount}, ignore_index=True)

    # Step 5: Calculate total income, expenses, and remaining budget
    def calculate_totals(self):
        total_income = self.income_data['Amount'].sum()
        total_expenses = self.expenses_data['Amount'].sum()
        total_allocated_budget = self.budget_data['Allocated Amount'].sum()
        remaining_budget = total_allocated_budget - total_expenses

        print("\nTotal Income: $", total_income)
        print("Total Expenses: $", total_expenses)
        print("Total Allocated Budget: $", total_allocated_budget)
        print("Remaining Budget: $", remaining_budget)

    # Step 6: Save budget data to Excel
    def save_to_excel(self, file_name="company_budget.xlsx"):
        with pd.ExcelWriter(file_name, engine='openpyxl') as writer:
            self.income_data.to_excel(writer, sheet_name="Income", index=False)
            self.expenses_data.to_excel(writer, sheet_name="Expenses", index=False)
            self.budget_data.to_excel(writer, sheet_name="Budget Allocations", index=False)
            writer.save()
        print(f"Budget data has been saved to {file_name}.")

# Step 7: Example usage
if __name__ == "__main__":
    budget_tracker = BudgetTracker()

    # Adding income data
    budget_tracker.add_income("Product Sales", 100000)
    budget_tracker.add_income("Consulting", 30000)

    # Adding expense data
    budget_tracker.add_expense("Salaries", 40000)
    budget_tracker.add_expense("Marketing", 15000)
    budget_tracker.add_expense("Utilities", 5000)

    # Allocating budget
    budget_tracker.allocate_budget("Salaries", 45000)
    budget_tracker.allocate_budget("Marketing", 20000)
    budget_tracker.allocate_budget("R&D", 15000)

    # Calculate totals
    budget_tracker.calculate_totals()

    # Save data to Excel
    budget_tracker.save_to_excel("company_budget.xlsx")

Example Output:
--- Total Budget Summary ---
Total Income: $220000.00
Total Expenses: $96000.00
Total Savings: $15000.00
Total Investments: $40000.00
Remaining Balance (Income - Expenses): $124000.00
Total Allocated (Savings + Investments): $55000.00
Data has been successfully saved to company_budget.xlsx.
